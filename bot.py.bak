# bot.py
import sys
import os
import time
import logging
from dotenv import load_dotenv
import yfinance as yf
import pandas as pd
import telebot

# -------------------------
# Fix Unicode output in Windows
# -------------------------
if sys.stdout.encoding.lower() != 'utf-8':
    sys.stdout.reconfigure(encoding='utf-8')

# -------------------------
# Load environment variables
# -------------------------
load_dotenv()  # Reads .env in current directory

BOT_TOKEN = os.getenv("BOT_TOKEN")
CHAT_ID = os.getenv("CHAT_ID")
WATCHLIST = os.getenv("WATCHLIST", "").split(",")

if not BOT_TOKEN or not CHAT_ID:
    raise ValueError("BOT_TOKEN or CHAT_ID not found in .env")

print(f"BOT_TOKEN loaded: {bool(BOT_TOKEN)}")
print(f"CHAT_ID loaded: {CHAT_ID}")
print(f"WATCHLIST: {WATCHLIST}")

# -------------------------
# Logging setup
# -------------------------
logging.basicConfig(
    format='%(asctime)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

# -------------------------
# Initialize bot
# -------------------------
bot = telebot.TeleBot(BOT_TOKEN)

# -------------------------
# SMA crossover calculation
# -------------------------
def get_crossover(symbol, period="6mo", interval="1d"):
    df = yf.download(symbol, period=period, interval=interval, progress=False, auto_adjust=True)
    if df.empty or len(df) < 200:
        logging.warning(f"Not enough data for {symbol}")
        return None

    df['SMA50'] = df['Close'].rolling(50).mean()
    df['SMA200'] = df['Close'].rolling(200).mean()
    
    latest = df.iloc[-1]
    prev = df.iloc[-2]

    # Check bullish crossover
    if prev["SMA50"] < prev["SMA200"] and latest["SMA50"] > latest["SMA200"]:
        return "Bullish crossover ✅"
    # Check bearish crossover
    elif prev["SMA50"] > prev["SMA200"] and latest["SMA50"] < latest["SMA200"]:
        return "Bearish crossover ❌"
    else:
        return None

# -------------------------
# Command handlers
# -------------------------
@bot.message_handler(commands=['watchlist'])
def watchlist_handler(message):
    for symbol in WATCHLIST:
        try:
            status = get_crossover(symbol)
            if status:
                bot.send_message(CHAT_ID, f"{symbol}: {status}")
        except Exception as e:
            logging.error(f"Error processing {symbol}: {e}")
            bot.send_message(CHAT_ID, f"Error fetching {symbol}")

# -------------------------
# Start polling safely
# -------------------------
def start_bot():
    while True:
        try:
            logging.info("Bot started polling...")
            bot.infinity_polling(timeout=10, long_polling_timeout=5)
        except telebot.apihelper.ApiTelegramException as e:
            logging.warning(f"Telegram API Exception: {e}")
            time.sleep(5)
        except Exception as e:
            logging.error(f"Unexpected error: {e}")
            time.sleep(5)

# -------------------------
# Entry point
# -------------------------
if __name__ == "__main__":
    print("🚀 bot.py running...")
    start_bot()
